"""add pgvector support"""

from __future__ import annotations

from typing import Sequence

from alembic import op
import sqlalchemy as sa
import pgvector.sqlalchemy


revision: str = '1c09ed14a98b'
down_revision: str | Sequence[str] | None = '85281dfc44a9'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # Create pgvector extension
    op.execute("CREATE EXTENSION IF NOT EXISTS vector")

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('summaries', sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=False))
    # ### end Alembic commands ###

    # Create vector index for cosine similarity search
    op.execute("CREATE INDEX summaries_embedding_cosine_idx ON summaries USING hnsw (embedding vector_cosine_ops)")


def downgrade() -> None:
    # Drop vector index
    op.execute("DROP INDEX IF EXISTS summaries_embedding_cosine_idx")

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('summaries', 'embedding')
    # ### end Alembic commands ###

    # Drop pgvector extension (optional - may be used by other tables)
    # op.execute("DROP EXTENSION IF EXISTS vector")
