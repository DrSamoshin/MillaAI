"""create chat tables"""

from __future__ import annotations

from typing import Sequence

from alembic import op
import sqlalchemy as sa
import pgvector.sqlalchemy
from sqlalchemy.dialects import postgresql

revision: str = '85281dfc44a9'
down_revision: str | Sequence[str] | None = '90e97ff8114e'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # TODO: Add pgvector extension when Docker image is updated
    # op.execute("CREATE EXTENSION IF NOT EXISTS vector")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('chats',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.Text(), nullable=True),
    sa.Column('model', sa.String(length=100), nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('last_seq', sa.Integer(), nullable=False),
    sa.Column('last_active_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('archived', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_chats_created_at', 'chats', ['created_at'], unique=False)
    op.create_index('ix_chats_last_active_at', 'chats', ['last_active_at'], unique=False)
    op.create_index('ix_chats_user_id', 'chats', ['user_id'], unique=False)
    op.create_table('devices',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('device_token', sa.String(length=255), nullable=False),
    sa.Column('platform', sa.String(length=20), nullable=False),
    sa.Column('locale', sa.String(length=10), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('last_seen', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_devices_device_token', 'devices', ['device_token'], unique=False)
    op.create_index('ix_devices_last_seen', 'devices', ['last_seen'], unique=False)
    op.create_index('ix_devices_user_id', 'devices', ['user_id'], unique=False)
    op.create_table('messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('chat_id', sa.UUID(), nullable=False),
    sa.Column('seq', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('truncated', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('from_summary', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('request_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['chat_id'], ['chats.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_messages_chat_id_created_at', 'messages', ['chat_id', 'created_at'], unique=False)
    op.create_index('ix_messages_chat_id_seq', 'messages', ['chat_id', 'seq'], unique=False)
    op.create_index('ix_messages_created_at', 'messages', ['created_at'], unique=False)
    op.create_index('ix_messages_request_id', 'messages', ['request_id'], unique=False)
    op.create_table('summaries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('chat_id', sa.UUID(), nullable=False),
    sa.Column('start_seq', sa.Integer(), nullable=False),
    sa.Column('end_seq', sa.Integer(), nullable=False),
    sa.Column('summary_text', sa.Text(), nullable=False),
    sa.Column('version', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    # TODO: Add embedding column when pgvector is available
    # sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=False),
    sa.ForeignKeyConstraint(['chat_id'], ['chats.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_summaries_chat_id', 'summaries', ['chat_id'], unique=False)
    op.create_index('ix_summaries_created_at', 'summaries', ['created_at'], unique=False)
    op.create_index('ix_summaries_start_seq', 'summaries', ['start_seq'], unique=False)

    # TODO: Create vector index when pgvector is available
    # op.execute("CREATE INDEX summaries_embedding_cosine_idx ON summaries USING hnsw (embedding vector_cosine_ops)")
    # ### end Alembic commands ###


def downgrade() -> None:
    # TODO: Drop vector index when pgvector is available
    # op.execute("DROP INDEX IF EXISTS summaries_embedding_cosine_idx")

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_summaries_start_seq', table_name='summaries')
    op.drop_index('ix_summaries_created_at', table_name='summaries')
    op.drop_index('ix_summaries_chat_id', table_name='summaries')
    op.drop_table('summaries')
    op.drop_index('ix_messages_request_id', table_name='messages')
    op.drop_index('ix_messages_created_at', table_name='messages')
    op.drop_index('ix_messages_chat_id_seq', table_name='messages')
    op.drop_index('ix_messages_chat_id_created_at', table_name='messages')
    op.drop_table('messages')
    op.drop_index('ix_devices_user_id', table_name='devices')
    op.drop_index('ix_devices_last_seen', table_name='devices')
    op.drop_index('ix_devices_device_token', table_name='devices')
    op.drop_table('devices')
    op.drop_index('ix_chats_user_id', table_name='chats')
    op.drop_index('ix_chats_last_active_at', table_name='chats')
    op.drop_index('ix_chats_created_at', table_name='chats')
    op.drop_table('chats')

    # Drop pgvector extension (optional - may be used by other tables)
    # op.execute("DROP EXTENSION IF EXISTS vector")
    # ### end Alembic commands ###
